import { useState } from 'react'
import { useAccount } from 'wagmi'
import { waitForTransactionReceipt, sendTransaction } from 'wagmi/actions'
import { parseEther } from 'viem'
import { config } from '../config/wagmi'
import { addXP, recordTransaction } from '../utils/xpUtils'
// ERC1155 doesn't need IPFS uploads - uses URI system instead

// ERC1155 Contract ABI
const ERC1155_ABI = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "balance",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "needed",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "ERC1155InsufficientBalance",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "approver",
				"type": "address"
			}
		],
		"name": "ERC1155InvalidApprover",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "idsLength",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "valuesLength",
				"type": "uint256"
			}
		],
		"name": "ERC1155InvalidArrayLength",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			}
		],
		"name": "ERC1155InvalidOperator",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "receiver",
				"type": "address"
			}
		],
		"name": "ERC1155InvalidReceiver",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			}
		],
		"name": "ERC1155InvalidSender",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "ERC1155MissingApprovalForAll",
		"type": "error"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "account",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "ApprovalForAll",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256[]",
				"name": "ids",
				"type": "uint256[]"
			},
			{
				"indexed": false,
				"internalType": "uint256[]",
				"name": "values",
				"type": "uint256[]"
			}
		],
		"name": "TransferBatch",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "TransferSingle",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "string",
				"name": "value",
				"type": "string"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "URI",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address[]",
				"name": "accounts",
				"type": "address[]"
			},
			{
				"internalType": "uint256[]",
				"name": "ids",
				"type": "uint256[]"
			}
		],
		"name": "balanceOfBatch",
		"outputs": [
			{
				"internalType": "uint256[]",
				"name": "",
				"type": "uint256[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			}
		],
		"name": "isApprovedForAll",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256[]",
				"name": "ids",
				"type": "uint256[]"
			},
			{
				"internalType": "uint256[]",
				"name": "values",
				"type": "uint256[]"
			},
			{
				"internalType": "bytes",
				"name": "data",
				"type": "bytes"
			}
		],
		"name": "safeBatchTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			},
			{
				"internalType": "bytes",
				"name": "data",
				"type": "bytes"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "setApprovalForAll",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes4",
				"name": "interfaceId",
				"type": "bytes4"
			}
		],
		"name": "supportsInterface",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "uri",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]

export const useDeployERC1155 = () => {
  const { address } = useAccount()
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)

  const deployERC1155 = async (name, symbol, uri) => {
    if (!address) {
      throw new Error('Wallet not connected')
    }

    setIsLoading(true)
    setError(null)

    try {
      console.log('🚀 Processing ERC1155 deployment request:', { name, symbol, uri })

      // Step 1: Send fee to specified wallet
      const feeWallet = '0x7d2Ceb7a0e0C39A3d0f7B5b491659fDE4bb7BCFe'

      console.log('💰 Sending fee to wallet:', feeWallet)
              const feeTxHash = await sendTransaction(config, {
                to: feeWallet,
                value: parseEther('0.00007'),
              })

      console.log('✅ Fee transaction sent:', feeTxHash)

      // Wait for fee transaction confirmation
      await waitForTransactionReceipt(config, {
        hash: feeTxHash,
        confirmations: 1,
      })

      console.log('✅ Fee transaction confirmed!')

      // Step 2: Deploy the actual ERC1155 contract
      console.log('🚀 Deploying ERC1155 contract...')
      
      // ERC1155 Contract Bytecode - Add your bytecode here
      const ERC1155_BYTECODE = "608060405234801561000f575f5ffd5b5060405180602001604052805f81525061002e8161003460201b60201c565b50610353565b80600290816100439190610284565b5050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806100c257607f821691505b6020821081036100d5576100d461007e565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026101377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826100fc565b61014186836100fc565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61018561018061017b84610159565b610162565b610159565b9050919050565b5f819050919050565b61019e8361016b565b6101b26101aa8261018c565b848454610108565b825550505050565b5f5f905090565b6101c96101ba565b6101d4818484610195565b505050565b5b818110156101f7576101ec5f826101c1565b6001810190506101da565b5050565b601f82111561023c5761020d816100db565b610216846100ed565b81016020851015610225578190505b610239610231856100ed565b8301826101d9565b50505b505050565b5f82821c905092915050565b5f61025c5f1984600802610241565b1980831691505092915050565b5f610274838361024d565b9150826002028217905092915050565b61028d82610047565b67ffffffffffffffff8111156102a6576102a5610051565b5b6102b082546100ab565b6102bb8282856101fb565b5f60209050601f8311600181146102ec575f84156102da578287015190505b6102e48582610269565b86555061034b565b601f1984166102fa866100db565b5f5b82811015610321578489015182556001820191506020850194506020810190506102fc565b8683101561033e578489015161033a601f89168261024d565b8355505b6001600288020188555050505b505050505050565b611e27806103605f395ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80634e1273f4116100595780634e1273f414610135578063a22cb46514610165578063e985e9c514610181578063f242432a146101b157610085565b8062fdd58e1461008957806301ffc9a7146100b95780630e89341c146100e95780632eb2c2d614610119575b5f5ffd5b6100a3600480360381019061009e91906112f5565b6101cd565b6040516100b09190611342565b60405180910390f35b6100d360048036038101906100ce91906113b0565b610222565b6040516100e091906113f5565b60405180910390f35b61010360048036038101906100fe919061140e565b610303565b60405161011091906114a9565b60405180910390f35b610133600480360381019061012e91906116b9565b610395565b005b61014f600480360381019061014a9190611844565b61043c565b60405161015c9190611971565b60405180910390f35b61017f600480360381019061017a91906119bb565b610546565b005b61019b600480360381019061019691906119f9565b61055c565b6040516101a891906113f5565b60405180910390f35b6101cb60048036038101906101c69190611a37565b6105ea565b005b5f5f5f8381526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f7fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102ec57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806102fc57506102fb82610691565b5b9050919050565b60606002805461031290611af7565b80601f016020809104026020016040519081016040528092919081815260200182805461033e90611af7565b80156103895780601f1061036057610100808354040283529160200191610389565b820191905f5260205f20905b81548152906001019060200180831161036c57829003601f168201915b50505050509050919050565b5f61039e6106fa565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156103e357506103e1868261055c565b155b156104275780866040517fe237d92200000000000000000000000000000000000000000000000000000000815260040161041e929190611b36565b60405180910390fd5b6104348686868686610701565b505050505050565b6060815183511461048857815183516040517f5b05999100000000000000000000000000000000000000000000000000000000815260040161047f929190611b5d565b60405180910390fd5b5f835167ffffffffffffffff8111156104a4576104a36114cd565b5b6040519080825280602002602001820160405280156104d25781602001602082028036833780820191505090505b5090505f5f90505b845181101561053b576105116104f982876107f590919063ffffffff16565b61050c838761080890919063ffffffff16565b6101cd565b82828151811061052457610523611b84565b5b6020026020010181815250508060010190506104da565b508091505092915050565b6105586105516106fa565b838361081b565b5050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f6105f36106fa565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156106385750610636868261055c565b155b1561067c5780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401610673929190611b36565b60405180910390fd5b6106898686868686610984565b505050505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610771575f6040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016107689190611bb1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036107e1575f6040517f01a835140000000000000000000000000000000000000000000000000000000081526004016107d89190611bb1565b60405180910390fd5b6107ee8585858585610a8a565b5050505050565b5f60208202602084010151905092915050565b5f60208202602084010151905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361088b575f6040517fced3e1000000000000000000000000000000000000000000000000000000000081526004016108829190611bb1565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161097791906113f5565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036109f4575f6040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016109eb9190611bb1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610a64575f6040517f01a83514000000000000000000000000000000000000000000000000000000008152600401610a5b9190611bb1565b60405180910390fd5b5f5f610a708585610b36565b91509150610a818787848487610a8a565b50505050505050565b610a9685858585610b66565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610b2f575f610ad26106fa565b90506001845103610b1e575f610af15f8661080890919063ffffffff16565b90505f610b075f8661080890919063ffffffff16565b9050610b17838989858589610ef9565b5050610b2d565b610b2c8187878787876110a8565b5b505b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b8051825114610bb057815181516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610ba7929190611b5d565b60405180910390fd5b5f610bb96106fa565b90505f5f90505b8351811015610db8575f610bdd828661080890919063ffffffff16565b90505f610bf3838661080890919063ffffffff16565b90505f73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610d16575f5f5f8481526020019081526020015f205f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610cc257888183856040517f03dee4c5000000000000000000000000000000000000000000000000000000008152600401610cb99493929190611bca565b60405180910390fd5b8181035f5f8581526020019081526020015f205f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614610dab57805f5f8481526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610da39190611c3a565b925050819055505b5050806001019050610bc0565b506001835103610e73575f610dd65f8561080890919063ffffffff16565b90505f610dec5f8561080890919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051610e64929190611b5d565b60405180910390a45050610ef2565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610ee9929190611c6d565b60405180910390a45b5050505050565b5f8473ffffffffffffffffffffffffffffffffffffffff163b11156110a0578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401610f59959493929190611cf4565b6020604051808303815f875af1925050508015610f9457506040513d601f19601f82011682018060405250810190610f919190611d60565b60015b611015573d805f8114610fc2576040519150601f19603f3d011682016040523d82523d5f602084013e610fc7565b606091505b505f81510361100d57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016110049190611bb1565b60405180910390fd5b805160208201fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461109e57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016110959190611bb1565b60405180910390fd5b505b505050505050565b5f8473ffffffffffffffffffffffffffffffffffffffff163b111561124f578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611108959493929190611d8b565b6020604051808303815f875af192505050801561114357506040513d601f19601f820116820180604052508101906111409190611d60565b60015b6111c4573d805f8114611171576040519150601f19603f3d011682016040523d82523d5f602084013e611176565b606091505b505f8151036111bc57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016111b39190611bb1565b60405180910390fd5b805160208201fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461124d57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016112449190611bb1565b60405180910390fd5b505b505050505050565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61129182611268565b9050919050565b6112a181611287565b81146112ab575f5ffd5b50565b5f813590506112bc81611298565b92915050565b5f819050919050565b6112d4816112c2565b81146112de575f5ffd5b50565b5f813590506112ef816112cb565b92915050565b5f5f6040838503121561130b5761130a611260565b5b5f611318858286016112ae565b9250506020611329858286016112e1565b9150509250929050565b61133c816112c2565b82525050565b5f6020820190506113555f830184611333565b92915050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61138f8161135b565b8114611399575f5ffd5b50565b5f813590506113aa81611386565b92915050565b5f602082840312156113c5576113c4611260565b5b5f6113d28482850161139c565b91505092915050565b5f8115159050919050565b6113ef816113db565b82525050565b5f6020820190506114085f8301846113e6565b92915050565b5f6020828403121561142357611422611260565b5b5f611430848285016112e1565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61147b82611439565b6114858185611443565b9350611495818560208601611453565b61149e81611461565b840191505092915050565b5f6020820190508181035f8301526114c18184611471565b905092915050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61150382611461565b810181811067ffffffffffffffff82111715611522576115216114cd565b5b80604052505050565b5f611534611257565b905061154082826114fa565b919050565b5f67ffffffffffffffff82111561155f5761155e6114cd565b5b602082029050602081019050919050565b5f5ffd5b5f61158661158184611545565b61152b565b905080838252602082019050602084028301858111156115a9576115a8611570565b5b835b818110156115d257806115be88826112e1565b8452602084019350506020810190506115ab565b5050509392505050565b5f82601f8301126115f0576115ef6114c9565b5b8135611600848260208601611574565b91505092915050565b5f5ffd5b5f67ffffffffffffffff821115611627576116266114cd565b5b61163082611461565b9050602081019050919050565b828183375f83830152505050565b5f61165d6116588461160d565b61152b565b90508281526020810184848401111561167957611678611609565b5b61168484828561163d565b509392505050565b5f82601f8301126116a05761169f6114c9565b5b81356116b084826020860161164b565b91505092915050565b5f5f5f5f5f60a086880312156116d2576116d1611260565b5b5f6116df888289016112ae565b95505060206116f0888289016112ae565b945050604086013567ffffffffffffffff81111561171157611710611264565b5b61171d888289016115dc565b935050606086013567ffffffffffffffff81111561173e5761173d611264565b5b61174a888289016115dc565b925050608086013567ffffffffffffffff81111561176b5761176a611264565b5b6117778882890161168c565b9150509295509295909350565b5f67ffffffffffffffff82111561179e5761179d6114cd565b5b602082029050602081019050919050565b5f6117c16117bc84611784565b61152b565b905080838252602082019050602084028301858111156117e4576117e3611570565b5b835b8181101561180d57806117f988826112ae565b8452602084019350506020810190506117e6565b5050509392505050565b5f82601f83011261182b5761182a6114c9565b5b813561183b8482602086016117af565b91505092915050565b5f5f6040838503121561185a57611859611260565b5b5f83013567ffffffffffffffff81111561187757611876611264565b5b61188385828601611817565b925050602083013567ffffffffffffffff8111156118a4576118a3611264565b5b6118b0858286016115dc565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6118ec816112c2565b82525050565b5f6118fd83836118e3565b60208301905092915050565b5f602082019050919050565b5f61191f826118ba565b61192981856118c4565b9350611934836118d4565b805f5b8381101561196457815161194b88826118f2565b975061195683611909565b925050600181019050611937565b5085935050505092915050565b5f6020820190508181035f8301526119898184611915565b905092915050565b61199a816113db565b81146119a4575f5ffd5b50565b5f813590506119b581611991565b92915050565b5f5f604083850312156119d1576119d0611260565b5b5f6119de858286016112ae565b92505060206119ef858286016119a7565b9150509250929050565b5f5f60408385031215611a0f57611a0e611260565b5b5f611a1c858286016112ae565b9250506020611a2d858286016112ae565b9150509250929050565b5f5f5f5f5f60a08688031215611a5057611a4f611260565b5b5f611a5d888289016112ae565b9550506020611a6e888289016112ae565b9450506040611a7f888289016112e1565b9350506060611a90888289016112e1565b925050608086013567ffffffffffffffff811115611ab157611ab0611264565b5b611abd8882890161168c565b9150509295509295909350565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611b0e57607f821691505b602082108103611b2157611b20611aca565b5b50919050565b611b3081611287565b82525050565b5f604082019050611b495f830185611b27565b611b566020830184611b27565b9392505050565b5f604082019050611b705f830185611333565b611b7d6020830184611333565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f602082019050611bc45f830184611b27565b92915050565b5f608082019050611bdd5f830187611b27565b611bea6020830186611333565b611bf76040830185611333565b611c046060830184611333565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611c44826112c2565b9150611c4f836112c2565b9250828201905080821115611c6757611c66611c0d565b5b92915050565b5f6040820190508181035f830152611c858185611915565b90508181036020830152611c998184611915565b90509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f611cc682611ca2565b611cd08185611cac565b9350611ce0818560208601611453565b611ce981611461565b840191505092915050565b5f60a082019050611d075f830188611b27565b611d146020830187611b27565b611d216040830186611333565b611d2e6060830185611333565b8181036080830152611d408184611cbc565b90509695505050505050565b5f81519050611d5a81611386565b92915050565b5f60208284031215611d7557611d74611260565b5b5f611d8284828501611d4c565b91505092915050565b5f60a082019050611d9e5f830188611b27565b611dab6020830187611b27565b8181036040830152611dbd8186611915565b90508181036060830152611dd18185611915565b90508181036080830152611de58184611cbc565b9050969550505050505056fea2646970667358221220d9e7c6a46e08ffcb12e5ca4867f626fa7eefaaa8f29b24396a567abfc811ea4864736f6c634300081e0033" // TODO: Replace with actual bytecode from Remix deployment
      
      // Encode constructor parameters
      const { encodeAbiParameters, parseAbiParameters } = await import('viem')
      
      const constructorData = encodeAbiParameters(
        parseAbiParameters('string uri'),
        [uri || ''] // Use empty string if URI not provided
      )
      
      const deployData = ERC1155_BYTECODE + constructorData.slice(2)
      
      const deployTxHash = await sendTransaction(config, {
        data: deployData,
        gas: 2000000n, // 2M gas limit for contract deployment
      })
      
      console.log('✅ Deploy transaction sent:', deployTxHash)
      
      // Wait for deploy confirmation
      const deployReceipt = await waitForTransactionReceipt(config, {
        hash: deployTxHash,
        confirmations: 1,
      })
      
      console.log('✅ ERC1155 contract deployed successfully!')
      console.log('📄 Contract Address:', deployReceipt.contractAddress)

      // Award XP for successful ERC1155 deployment
      try {
        console.log('🎉 Awarding 100 XP for ERC1155 deployment!')
        await addXP(address, 100, 'ERC1155 Deployment')
      } catch (xpError) {
        console.error('❌ Failed to add XP:', xpError)
      }

      // Record transaction
      try {
        await recordTransaction({
          wallet_address: address,
          transaction_type: 'ERC1155_DEPLOY',
          transaction_hash: deployTxHash,
          contract_address: deployReceipt.contractAddress,
          amount: '0.00007',
          currency: 'ETH',
          status: 'success',
          game_type: 'ERC1155 Deployment',
          metadata: {
            name,
            symbol,
            uri
          }
        })
      } catch (recordError) {
        console.error('❌ Failed to record transaction:', recordError)
      }

      return {
        contractAddress: deployReceipt.contractAddress,
        deployTxHash
      }
    } catch (err) {
      console.error('❌ ERC1155 deployment failed:', err)
      setError(err.message || 'Failed to deploy ERC1155 contract')
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  return { deployERC1155, isLoading, error }
}
